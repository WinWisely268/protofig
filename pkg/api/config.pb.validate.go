// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/config.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _config_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on AppConfig with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AppConfig) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMinioComponent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "MinioComponent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMaintemplateComponent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "MaintemplateComponent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AppConfigValidationError is the validation error returned by
// AppConfig.Validate if the designated constraints aren't met.
type AppConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppConfigValidationError) ErrorName() string { return "AppConfigValidationError" }

// Error satisfies the builtin error interface
func (e AppConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppConfigValidationError{}

// Validate checks the field values on MinioComponent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MinioComponent) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMinioAcceskey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MinioComponentValidationError{
				field:  "MinioAcceskey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMinioSecretkey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MinioComponentValidationError{
				field:  "MinioSecretkey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MinioComponentValidationError is the validation error returned by
// MinioComponent.Validate if the designated constraints aren't met.
type MinioComponentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MinioComponentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MinioComponentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MinioComponentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MinioComponentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MinioComponentValidationError) ErrorName() string { return "MinioComponentValidationError" }

// Error satisfies the builtin error interface
func (e MinioComponentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMinioComponent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MinioComponentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MinioComponentValidationError{}

// Validate checks the field values on MaintemplateComponent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MaintemplateComponent) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGcpUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaintemplateComponentValidationError{
				field:  "GcpUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGcpProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaintemplateComponentValidationError{
				field:  "GcpProject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMinioLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaintemplateComponentValidationError{
				field:  "MinioLocation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMinioTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaintemplateComponentValidationError{
				field:  "MinioTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMinioEnckey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaintemplateComponentValidationError{
				field:  "MinioEnckey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMinioSsl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaintemplateComponentValidationError{
				field:  "MinioSsl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMinioEndpoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaintemplateComponentValidationError{
				field:  "MinioEndpoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MaintemplateComponentValidationError is the validation error returned by
// MaintemplateComponent.Validate if the designated constraints aren't met.
type MaintemplateComponentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaintemplateComponentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaintemplateComponentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaintemplateComponentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaintemplateComponentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaintemplateComponentValidationError) ErrorName() string {
	return "MaintemplateComponentValidationError"
}

// Error satisfies the builtin error interface
func (e MaintemplateComponentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaintemplateComponent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaintemplateComponentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaintemplateComponentValidationError{}
